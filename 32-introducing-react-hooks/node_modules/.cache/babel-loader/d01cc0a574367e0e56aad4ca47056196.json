{"ast":null,"code":"import _slicedToArray from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/32-introducing-react-hooks/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/32-introducing-react-hooks/src/Toggler.js\";\nimport React from 'react';\nimport { useState } from 'react'; // example of hooks and use state\n// needs to refactor to a custom hook\n\nexport default function Toggler() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isHappy = _useState2[0],\n      setIsHappy = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isHeartbroken = _useState4[0],\n      setIsHeartbroken = _useState4[1];\n\n  var toggleIsHappy = function toggleIsHappy() {\n    return setIsHappy(!isHappy);\n  };\n\n  var toggleIsHeartboken = function toggleIsHeartboken() {\n    return setIsHeartbroken(!isHeartbroken);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Toggler hook\"), React.createElement(\"h1\", {\n    onClick: toggleIsHappy,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, isHappy ? '😂' : '😭'), React.createElement(\"h1\", {\n    onClick: toggleIsHeartboken,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, isHeartbroken ? '💔' : '❤️‍🔥'));\n}","map":{"version":3,"sources":["/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/32-introducing-react-hooks/src/Toggler.js"],"names":["React","useState","Toggler","isHappy","setIsHappy","isHeartbroken","setIsHeartbroken","toggleIsHappy","toggleIsHeartboken"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CAEA;AACA;;AACA,eAAe,SAASC,OAAT,GAAmB;AAAA,kBACHD,QAAQ,CAAC,IAAD,CADL;AAAA;AAAA,MAC1BE,OAD0B;AAAA,MACjBC,UADiB;;AAAA,mBAESH,QAAQ,CAAC,IAAD,CAFjB;AAAA;AAAA,MAE1BI,aAF0B;AAAA,MAEXC,gBAFW;;AAGjC,MAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,WAAMH,UAAU,CAAC,CAACD,OAAF,CAAhB;AAAA,GAAtB;;AACA,MAAMK,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,WAAMF,gBAAgB,CAAC,CAACD,aAAF,CAAtB;AAAA,GAA3B;;AAEA,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADD,EAEC;AAAI,IAAA,OAAO,EAAEE,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BJ,OAAO,GAAG,IAAH,GAAU,IAA9C,CAFD,EAGC;AAAI,IAAA,OAAO,EAAEK,kBAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkCH,aAAa,GAAG,IAAH,GAAU,OAAzD,CAHD,CADD;AAOA","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\n// example of hooks and use state\n// needs to refactor to a custom hook\nexport default function Toggler() {\n\tconst [isHappy, setIsHappy] = useState(true);\n\tconst [isHeartbroken, setIsHeartbroken] = useState(true);\n\tconst toggleIsHappy = () => setIsHappy(!isHappy);\n\tconst toggleIsHeartboken = () => setIsHeartbroken(!isHeartbroken);\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Toggler hook</h1>\n\t\t\t<h1 onClick={toggleIsHappy}>{isHappy ? '😂' : '😭'}</h1>\n\t\t\t<h1 onClick={toggleIsHeartboken}>{isHeartbroken ? '💔' : '❤️‍🔥'}</h1>\n\t\t</div>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}
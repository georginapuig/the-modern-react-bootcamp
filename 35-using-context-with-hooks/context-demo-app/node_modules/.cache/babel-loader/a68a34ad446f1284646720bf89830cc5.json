{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.styles = void 0;\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\nvar _react = _interopRequireDefault(require(\"react\"));\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\nvar _reactDom = _interopRequireDefault(require(\"react-dom\"));\nvar _scrollbarSize = _interopRequireDefault(require(\"dom-helpers/util/scrollbarSize\"));\nvar _withStyles = _interopRequireDefault(require(\"../styles/withStyles\"));\nvar _Popover = _interopRequireDefault(require(\"../Popover\"));\nvar _MenuList = _interopRequireDefault(require(\"../MenuList\"));\n\n// @inheritedComponent Popover\nvar RTL_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'right'\n};\nvar LTR_ORIGIN = {\n  vertical: 'top',\n  horizontal: 'left'\n};\nvar styles = {\n  /* Styles applied to the `Paper` component. */\n  paper: {\n    // specZ: The maximum height of a simple menu should be one or more rows less than the view\n    // height. This ensures a tapable area outside of the simple menu with which to dismiss\n    // the menu.\n    maxHeight: 'calc(100% - 96px)',\n    // Add iOS momentum scrolling.\n    WebkitOverflowScrolling: 'touch'\n  }\n};\nexports.styles = styles;\nvar Menu = /*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Menu, _React$Component);\n  function Menu() {\n    var _getPrototypeOf2;\n    var _this;\n    (0, _classCallCheck2.default)(this, Menu);\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Menu)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.getContentAnchorEl = function () {\n      if (_this.menuListRef.selectedItemRef) {\n        return _reactDom.default.findDOMNode(_this.menuListRef.selectedItemRef);\n      }\n      return _reactDom.default.findDOMNode(_this.menuListRef).firstChild;\n    };\n    _this.focus = function () {\n      if (_this.menuListRef && _this.menuListRef.selectedItemRef) {\n        _reactDom.default.findDOMNode(_this.menuListRef.selectedItemRef).focus();\n        return;\n      }\n      var menuList = _reactDom.default.findDOMNode(_this.menuListRef);\n      if (menuList && menuList.firstChild) {\n        menuList.firstChild.focus();\n      }\n    };\n    _this.handleMenuListRef = function (ref) {\n      _this.menuListRef = ref;\n    };\n    _this.handleEntering = function (element) {\n      var _this$props = _this.props,\n        disableAutoFocusItem = _this$props.disableAutoFocusItem,\n        theme = _this$props.theme;\n      var menuList = _reactDom.default.findDOMNode(_this.menuListRef); // Focus so the scroll computation of the Popover works as expected.\n\n      if (disableAutoFocusItem !== true) {\n        _this.focus();\n      } // Let's ignore that piece of logic if users are already overriding the width\n      // of the menu.\n\n      if (menuList && element.clientHeight < menuList.clientHeight && !menuList.style.width) {\n        var size = \"\".concat((0, _scrollbarSize.default)(), \"px\");\n        menuList.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = size;\n        menuList.style.width = \"calc(100% + \".concat(size, \")\");\n      }\n      if (_this.props.onEntering) {\n        _this.props.onEntering(element);\n      }\n    };\n    _this.handleListKeyDown = function (event) {\n      if (event.key === 'Tab') {\n        event.preventDefault();\n        if (_this.props.onClose) {\n          _this.props.onClose(event, 'tabKeyDown');\n        }\n      }\n    };\n    return _this;\n  }\n  (0, _createClass2.default)(Menu, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.open && this.props.disableAutoFocusItem !== true) {\n        this.focus();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        children = _this$props2.children,\n        classes = _this$props2.classes,\n        disableAutoFocusItem = _this$props2.disableAutoFocusItem,\n        MenuListProps = _this$props2.MenuListProps,\n        onEntering = _this$props2.onEntering,\n        _this$props2$PaperPro = _this$props2.PaperProps,\n        PaperProps = _this$props2$PaperPro === void 0 ? {} : _this$props2$PaperPro,\n        PopoverClasses = _this$props2.PopoverClasses,\n        theme = _this$props2.theme,\n        other = (0, _objectWithoutProperties2.default)(_this$props2, [\"children\", \"classes\", \"disableAutoFocusItem\", \"MenuListProps\", \"onEntering\", \"PaperProps\", \"PopoverClasses\", \"theme\"]);\n      return _react.default.createElement(_Popover.default, (0, _extends2.default)({\n        getContentAnchorEl: this.getContentAnchorEl,\n        classes: PopoverClasses,\n        onEntering: this.handleEntering,\n        anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n        transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,\n        PaperProps: (0, _extends2.default)({}, PaperProps, {\n          classes: (0, _extends2.default)({}, PaperProps.classes, {\n            root: classes.paper\n          })\n        })\n      }, other), _react.default.createElement(_MenuList.default, (0, _extends2.default)({\n        onKeyDown: this.handleListKeyDown\n      }, MenuListProps, {\n        ref: this.handleMenuListRef\n      }), children));\n    }\n  }]);\n  return Menu;\n}(_react.default.Component);\nprocess.env.NODE_ENV !== \"production\" ? Menu.propTypes = {\n  /**\n   * The DOM element used to set the position of the menu.\n   */\n  anchorEl: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]),\n  /**\n   * Menu contents, normally `MenuItem`s.\n   */\n  children: _propTypes.default.node,\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: _propTypes.default.object.isRequired,\n  /**\n   * If `true`, the selected / first menu item will not be auto focused.\n   */\n  disableAutoFocusItem: _propTypes.default.bool,\n  /**\n   * Properties applied to the [`MenuList`](/api/menu-list/) element.\n   */\n  MenuListProps: _propTypes.default.object,\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback\n   * @param {string} reason Can be:`\"escapeKeyDown\"`, `\"backdropClick\"`, `\"tabKeyDown\"`\n   */\n  onClose: _propTypes.default.func,\n  /**\n   * Callback fired before the Menu enters.\n   */\n  onEnter: _propTypes.default.func,\n  /**\n   * Callback fired when the Menu has entered.\n   */\n  onEntered: _propTypes.default.func,\n  /**\n   * Callback fired when the Menu is entering.\n   */\n  onEntering: _propTypes.default.func,\n  /**\n   * Callback fired before the Menu exits.\n   */\n  onExit: _propTypes.default.func,\n  /**\n   * Callback fired when the Menu has exited.\n   */\n  onExited: _propTypes.default.func,\n  /**\n   * Callback fired when the Menu is exiting.\n   */\n  onExiting: _propTypes.default.func,\n  /**\n   * If `true`, the menu is visible.\n   */\n  open: _propTypes.default.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: _propTypes.default.object,\n  /**\n   * `classes` property applied to the [`Popover`](/api/popover/) element.\n   */\n  PopoverClasses: _propTypes.default.object,\n  /**\n   * @ignore\n   */\n  theme: _propTypes.default.object.isRequired,\n  /**\n   * The length of the transition in `ms`, or 'auto'\n   */\n  transitionDuration: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.shape({\n    enter: _propTypes.default.number,\n    exit: _propTypes.default.number\n  }), _propTypes.default.oneOf(['auto'])])\n} : void 0;\nMenu.defaultProps = {\n  disableAutoFocusItem: false,\n  transitionDuration: 'auto'\n};\nvar _default = (0, _withStyles.default)(styles, {\n  name: 'MuiMenu',\n  withTheme: true\n})(Menu);\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}
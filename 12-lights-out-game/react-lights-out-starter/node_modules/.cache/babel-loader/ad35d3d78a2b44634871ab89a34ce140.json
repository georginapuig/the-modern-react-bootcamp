{"ast":null,"code":"import _slicedToArray from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state({\n      hasWon: false\n    });\n\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n\n      /*#__PURE__*/\n      React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 5\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 9\n        }\n      }))); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","coord","ncols","nrows","split","map","Number","y","x","flipCell","setState"],"sources":["/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state({hasWon: false});\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    <table className=\"Board\">\n      <tr>\n        <Cell />\n      </tr>\n    </table>\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;EAEJ,eAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,2EAAMA,KAAN,GADiB,CAGjB;;IACA,MAAKC,KAAL,CAAW;MAACC,MAAM,EAAE;IAAT,CAAX;;IAJiB;EAKlB;EAED;;;;;kCAEc;MACZ,IAAIC,KAAK,GAAG,EAAZ,CADY,CAEZ;;MACA,OAAOA,KAAP;IACD;IAED;;;;oCAEgBC,K,EAAO;MAAA,kBACA,KAAKJ,KADL;MAAA,IAChBK,KADgB,eAChBA,KADgB;MAAA,IACTC,KADS,eACTA,KADS;MAErB,IAAIH,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;MAFqB,uBAGRC,KAAK,CAACG,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;MAAA;MAAA,IAGhBC,CAHgB;MAAA,IAGbC,CAHa;;MAMrB,SAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;QACtB;QAEA,IAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGN,KAAd,IAAuBK,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGJ,KAAzC,EAAgD;UAC9CH,KAAK,CAACO,CAAD,CAAL,CAASC,CAAT,IAAc,CAACR,KAAK,CAACO,CAAD,CAAL,CAASC,CAAT,CAAf;QACD;MACF,CAZoB,CAcrB;MAEA;MACA;;;MAEA,KAAKE,QAAL,CAAc;QAACV,KAAK,EAALA,KAAD;QAAQD,MAAM,EAANA;MAAR,CAAd;IACD;IAGD;;;;6BAES;MAEP;MAEA;MAEA;;MACA;MAAA;QAAO,SAAS,EAAC,OAAjB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE,oBAAC,IAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CADF,EAPO,CAYP;IACD;;;;EAzDiBL,S;;AA6DpB,eAAeE,KAAf"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push(Math.random() < this.props.chanceLightStartsOn);\n        }\n\n        board.push(row);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      var tblBoard = [];\n\n      for (var y = 0; y < this.props.nrows; y++) {\n        var row = [];\n\n        for (var x = 0; x < this.props.ncols; x++) {\n          row.push( /*#__PURE__*/React.createElement(Cell, {\n            key: \"\".concat(y, \"-\").concat(x),\n            isLit: this.state.board[y][x],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 18\n            }\n          }));\n        }\n\n        tblBoard.push( /*#__PURE__*/React.createElement(\"tr\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 21\n          }\n        }, row));\n      } // make table board\n\n\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 9\n        }\n      }, tblBoard)); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","y","nrows","row","x","ncols","push","Math","random","chanceLightStartsOn","coord","split","map","Number","flipCell","tblBoard","defaultProps"],"sources":["/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = { \n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(Math.random() < this.props.chanceLightStartsOn);\n      }   \n      board.push(row);   \n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n    const tblBoard = [];\n\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        row.push(<Cell key={`${y}-${x}`} isLit={this.state.board[y][x]} />)\n      }\n      tblBoard.push(<tr>{row}</tr>)\n    }\n\n    // make table board\n    return (\n      <table className='Board'>\n        <tbody>\n          {tblBoard}\n        </tbody>\n      </table>\n    )\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
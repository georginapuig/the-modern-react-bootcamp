{"ast":null,"code":"import _classCallCheck from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.props.nrows; i++) {\n        console.log(i);\n      }\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {//let {ncols, nrows} = this.props;\n      //let board = this.state.board;\n      //let [y, x] = coord.split(\"-\").map(Number);\n      // function flipCell(y, x) {\n      //   // if this coord is actually on board, flip it\n      //   if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n      //     board[y][x] = !board[y][x];\n      //   }\n      // }\n      // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      // this.setState({board, hasWon});\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      return /*#__PURE__*/React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 12\n        }\n      }, /*#__PURE__*/React.createElement(\"tr\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Cell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }\n      }))); // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncolumns: 5,\n  chanceLightStartsOn: 0.25\n};\nexport default Board;","map":{"version":3,"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","i","nrows","console","log","coord","defaultProps","ncolumns","chanceLightStartsOn"],"sources":["/Users/georginapuig/code/georginapuig/the-modern-react-bootcamp/12-lights-out-game/react-lights-out-starter/src/Board.js"],"sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncolumns: 5,\n    chanceLightStartsOn: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n\n    // TODO: set initial state\n    this.state = { \n      hasWon: false,\n      board: this.createBoard()\n    };\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let i = 0; i < this.props.nrows; i++) {\n      console.log(i)\n      \n    }\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    //let {ncols, nrows} = this.props;\n    //let board = this.state.board;\n    //let [y, x] = coord.split(\"-\").map(Number);\n\n\n    // function flipCell(y, x) {\n    //   // if this coord is actually on board, flip it\n\n    //   if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n    //     board[y][x] = !board[y][x];\n    //   }\n    // }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    // this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n    return <table className=\"Board\">\n      <tr>\n        <Cell />\n      </tr>\n    </table>\n    // TODO\n  }\n}\n\n\nexport default Board;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEMC,K;;;EAQJ,eAAYC,KAAZ,EAAmB;IAAA;;IAAA;;IACjB,2EAAMA,KAAN,GADiB,CAGjB;;IACA,MAAKC,KAAL,GAAa;MACXC,MAAM,EAAE,KADG;MAEXC,KAAK,EAAE,MAAKC,WAAL;IAFI,CAAb;IAJiB;EAQlB;EAED;;;;;kCAEc;MACZ,IAAID,KAAK,GAAG,EAAZ,CADY,CAEZ;;MACA,KAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKL,KAAL,CAAWM,KAA/B,EAAsCD,CAAC,EAAvC,EAA2C;QACzCE,OAAO,CAACC,GAAR,CAAYH,CAAZ;MAED;;MACD,OAAOF,KAAP;IACD;IAED;;;;oCAEgBM,K,EAAO,CACrB;MACA;MACA;MAGA;MACA;MAEA;MACA;MACA;MACA;MAEA;MAEA;MACA;MAEA;IACD;IAGD;;;;6BAES;MAEP;MAEA;MAEA;MACA,oBAAO;QAAO,SAAS,EAAC,OAAjB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACL;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,gBACE,oBAAC,IAAD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EADF,CADK,CAAP,CAPO,CAYP;IACD;;;;EAtEiBZ,S;;AAAdE,K,CAEGW,Y,GAAe;EACpBJ,KAAK,EAAE,CADa;EAEpBK,QAAQ,EAAE,CAFU;EAGpBC,mBAAmB,EAAE;AAHD,C;AAwExB,eAAeb,KAAf"},"metadata":{},"sourceType":"module"}